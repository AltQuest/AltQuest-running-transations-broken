package com.altquest.altquest;

import org.apache.commons.codec.binary.Base64;
import org.bukkit.Bukkit;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;
import javax.net.ssl.HttpsURLConnection;
import java.io.*;
import java.net.*;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Random;

/**
 * 
 */
public class DOGE_Wallet {
    public int balance;
    public int unconfirmedBalance;
    public DOGE_Wallet(String address,String privatekey) {
        this.address=address;
        this.privatekey=privatekey;
    }
    public DOGE_Wallet(String address) {
        this.address=address;
    }
    public String address=null;
    private String privatekey=null;
    int balance() {
        this.updateBalance();
        return this.balance;
    }
    int final_balance() {
        int final_balance=this.balance+this.unconfirmedBalance;
        return final_balance;
    }
    
    public int getBlockchainHeight() {
        JSONObject jsonobj = this.makeBlockCypherCall("https://api.blockcypher.com/v1/doge/main");
        return ((Number) jsonobj.get("height")).intValue();
    }
    
    // @todo: make this just accept the endpoint name and (optional) parameters
    public JSONObject makeBlockCypherCall(String requestedURL) {
        JSONParser parser = new JSONParser();
        
        try {
            System.out.println("Making Blockcypher API call...");
            // @todo: add support for some extra params in this method (allow passing in an optional hash/dictionary/whatever Java calls it)?
            URL url;
            if(AltQuest.BLOCKCYPHER_API_KEY!=null) {
                url = new URL(requestedURL + "?token=" + AltQuest.BLOCKCYPHER_API_KEY);

            } else {
                url = new URL(requestedURL);

            }

            System.out.println(url.toString());
            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
            con.setRequestMethod("GET");
            con.setRequestProperty("User-Agent", "Mozilla/1.22 (compatible; MSIE 2.0; Windows 3.1)");
            con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

            double responseCode = con.getResponseCode();

            BufferedReader in = new BufferedReader(
                    new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();
            
            return (JSONObject) parser.parse(response.toString());
        } catch (IOException e) {
            System.out.println("problem making API call");
            System.out.println(e);
            // Unable to call API?
        } catch (ParseException e) {
            // Bad JSON?
        }
        
        return new JSONObject(); // just give them an empty object
    }
    int bitcore_balance(String host, String address, boolean confirmed) throws IOException {
        URL url;
        if(confirmed==true) {
            url=new URL("http://"+host+"/insight-api/addr/"+address+"/balance");
        } else {
            url=new URL("http://"+host+"/insight-api/addr/"+address+"/unconfirmedBalance");
        }

        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("GET");
        con.setRequestProperty("User-Agent", "Mozilla/1.22 (compatible; MSIE 2.0; Windows 3.1)");
        con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

        int responseCode = con.getResponseCode();

        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
        String inputLine;
        StringBuffer response = new StringBuffer();

        while ((inputLine = in.readLine()) != null) {
            response.append(inputLine);
        }
        in.close();

        return Integer.parseInt(response.toString());

    }
    
    void updateBalance() {
        try {
                URL url;
                if(AltQuest.BLOCKCYPHER_API_KEY!=null) {
                    url=new URL("https://api.blockcypher.com/v1/doge/main/addrs/"+address+"/balance?token="+AltQuest.BLOCKCYPHER_API_KEY);
                } else {
                    url=new URL("https://api.blockcypher.com/v1/doge/main/addrs/"+address+"/balance");
                }
                System.out.println(url.toString());
                HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
                con.setRequestMethod("GET");
                con.setRequestProperty("User-Agent", "Mozilla/1.22 (compatible; MSIE 2.0; Windows 3.1)");
                con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

                int responseCode = con.getResponseCode();

                BufferedReader in = new BufferedReader(
                        new InputStreamReader(con.getInputStream()));
                String inputLine;
                StringBuffer response = new StringBuffer();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                JSONParser parser = new JSONParser();
                final JSONObject jsonobj = (JSONObject) parser.parse(response.toString());
                this.balance = (((Number) jsonobj.get("balance")).intValue());
                this.unconfirmedBalance = (((Number) jsonobj.get("unconfirmed_balance")).intValue());
            

        } catch (IOException e) {
            System.out.println("[balance] problem updating balance for address "+address);
            System.out.println(e);
            // wallet might be new and it's not listed on the blockchain yet
        } catch (ParseException e) {
            // There is a problem with the balance API
        }

    }
/*old transation not working
    boolean transaction(int sat, DOGE_Wallet wallet) throws IOException {
	
        JSONObject payload=new JSONObject();

        JSONArray address1 = new JSONArray();
        JSONArray address2 = new JSONArray();
        JSONArray input1 = new JSONArray();
        JSONArray input2 = new JSONArray();
        JSONArray list = new JSONArray();
        JSONArray list2 = new JSONArray();

	JSONObject jsonobj=new JSONObject();
	JSONObject jsonobj2=new JSONObject();
 	
		address1.add(this.address);
		jsonobj.put("addresses", address1);
		list.add(jsonobj);
		payload.put("inputs",list);

		address2.add(wallet.address);
		jsonobj2.put("addresses", address2);
		jsonobj2.put("value", sat);
		list2.add(jsonobj2);
		payload.put("outputs",list2);

//{"input":[{"addresses":["6JgYntinDiW13prEFWCPUPWPwEW8vGUfer27o4Aa2SfryA34yPN"]}],"output":[{"addresses":["DFpwRzgUWDwwctxz1b2rerRb4JnayNSzf2"],"value":1223.2774965744532}]}

        URL url = new URL("https://api.blockcypher.com/v1/doge/main/txs/new?token=" + AltQuest.BLOCKCYPHER_API_KEY);
        String inputLine = "";
        HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
        try {
            System.out.println("\nSending 'POST' request to URL : " + url);
            System.out.println("Payload : " + payload.toString());
            con.setRequestMethod("POST");
            con.setRequestProperty("User-Agent", "Mozilla/1.22 (compatible; MSIE 2.0; Windows 3.1)");
            con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");
            con.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
            con.setDoOutput(true);
            OutputStreamWriter out = new OutputStreamWriter(con.getOutputStream());
            out.write(payload.toString());
            out.close();
            int responseCode = con.getResponseCode();

            System.out.println("Response Code : " + responseCode);

            BufferedReader in = new BufferedReader(
                    new InputStreamReader(con.getInputStream()));
            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            if (responseCode == 200||responseCode==201) {
		try {
		JSONParser parser2 = new JSONParser();
                final JSONObject resp = (JSONObject) parser2.parse(response.toString());
		System.out.println(resp.toString());
		{//send tx
	URL url2 = new URL("https://api.blockcypher.com/v1/doge/main/txs/send?token=" + AltQuest.BLOCKCYPHER_API_KEY);
        String inputLine2 = "";
        HttpsURLConnection con2 = (HttpsURLConnection) url2.openConnection();
        try {
            System.out.println("\nSending 'POST' request to URL : " + url2);
            con2.setRequestMethod("POST");
            con2.setRequestProperty("User-Agent", "Mozilla/1.22 (compatible; MSIE 2.0; Windows 3.1)");
            con2.setRequestProperty("Accept-Language", "en-US,en;q=0.5");
            con2.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
            con2.setDoOutput(true);
            OutputStreamWriter out2 = new OutputStreamWriter(con.getOutputStream());
            out2.write(resp.toString());
            out2.close();
            int responseCode2 = con.getResponseCode();

            System.out.println("Response Code : " + responseCode2);

            BufferedReader in2 = new BufferedReader(
                    new InputStreamReader(con2.getInputStream()));
            StringBuffer response2 = new StringBuffer();

            while ((inputLine2 = in2.readLine()) != null) {
                response2.append(inputLine2);
            }
            in2.close();

            if (responseCode == 200||responseCode==201) {
		try {		
		JSONParser parser0 = new JSONParser();
                respString = (JSONObject) parser0.parse(response.toString()); 
		} catch (org.json.simple.parser.ParseException e0) {
                e0.printStackTrace();
            	}
		
   	         send_blockcypher_transaction(respString.toString());
		
                return true;
            } else {
                return false;
            }
        } catch(IOException ioe2) {
            System.err.println("IOException: " + ioe2);

          

            System.out.println(inputLine2);


            return false;

		} catch (org.json.simple.parser.ParseException e) {
                e.printStackTrace();
            	}
                return true;
            } else {
                return false;
            }
        } catch(IOException ioe) {
            System.err.println("IOException: " + ioe);

            InputStream error = con.getErrorStream();

                int data = error.read();
                while (data != -1) {
                    //do something with data...
                    inputLine = inputLine + (char)data;
                    data = error.read();
                }
                error.close();


            System.out.println(inputLine);


            return false;
        }
        
    }
*/ //end of old transation
    String transactionSign(String toSignOBJ) throws IOException {
		JSONObject respString=new JSONObject();
      URL url = new URL("https://api.blockcypher.com/v1/doge/main/txs/send?token=" + AltQuest.BLOCKCYPHER_API_KEY);
        String inputLine = "";
        HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
        try {
            System.out.println("\nSending 'POST' request to URL : " + url);
            System.out.println("Payload : " + toSignOBJ);
            con.setRequestMethod("POST");
            con.setRequestProperty("User-Agent", "Mozilla/1.22 (compatible; MSIE 2.0; Windows 3.1)");
            con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");
            con.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
            con.setDoOutput(true);
            OutputStreamWriter out = new OutputStreamWriter(con.getOutputStream());
            out.write(toSignOBJ);
            out.close();
            int responseCode = con.getResponseCode();

            System.out.println("Response Code : " + responseCode);

            BufferedReader in = new BufferedReader(
                    new InputStreamReader(con.getInputStream()));
            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            if (responseCode == 200||responseCode==201) {
				
		
		
		
		send_blockcypher_transaction(response.toString());

		
				return response.toString();
				
		
            } else {
                return respString.toString();
            }
        } catch(IOException ioe) {
            System.err.println("IOException: " + ioe);

            InputStream error = con.getErrorStream();

                int data = error.read();
                while (data != -1) {
                    //do something with data...
                    inputLine = inputLine + (char)data;
                    data = error.read();
                }
                error.close();


            System.out.println(inputLine);



        }
                    return respString.toString();
    }
// WIF Format of your private Key
/*
String myPrivateKey = this.privatekey;
IntermediaryTransaction unsignedTx = context.getTransactionService()
    .newTransaction(
        new ArrayList<String>(Arrays.asList(this.address)),
        new ArrayList<String>(Arrays.asList(wallet.address)),
        sat
    );
SignUtils.signWithBase58KeyWithPubKey(unsignedTx, myPrivateKey);

Transaction tx = context.getTransactionService().sendTransaction(unsignedTx);

System.out.println("Sent transaction: " + GsonFactory.getGsonPrettyPrint().toJson(tx));

}*/
    boolean transaction(int sat, DOGE_Wallet wallet) throws IOException {
	try{	
	if(create_blockcypher_transaction(sat, wallet.address)==true){return true;}
	else {return false;}
	} catch (org.json.simple.parser.ParseException e) {
            e.printStackTrace();
            return false;
        }
        
    }
    boolean emailTransaction(int sat,String email) throws NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException, IOException, ParseException {
        // create payload
        JSONObject obj = new JSONObject();
        obj.put("to", email);
        obj.put("currency", "SAT");
        obj.put("amount", sat);
        obj.put("subject", "AltQuest Withdrawal");
        obj.put("timestamp", System.currentTimeMillis() / 1000L);
        obj.put("unique_request_id", "ALTQUEST" + System.currentTimeMillis());
        String data = obj.toString();
        int blocksize = 16;
        Bukkit.getLogger().info("blocksize: " + blocksize);
        int pad = blocksize - (data.length() % blocksize);
        Bukkit.getLogger().info("pad: " + pad);

        for (int i = 0; i < pad; i++) {
            data = data + "\0";
        }

        Bukkit.getLogger().info("payload: " + data);
        // encrypt payload
        String key = System.getenv("XAPO_APP_KEY");
        SecretKeySpec skeySpec = new SecretKeySpec(key.getBytes(), "AES");
        Cipher cipher = null;

            cipher = Cipher.getInstance("AES/ECB/NoPadding");
            cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
            String epayload = new String(Base64.encodeBase64(cipher.doFinal(data.getBytes())));


            // post payload
            String urlstring = "https://api.xapo.com/v1/credit/";
            String query = "hash=" + URLEncoder.encode(epayload, "UTF-8") + "&appID=" + System.getenv("XAPO_APP_ID");

            URL url = new URL(urlstring);
            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();

            //add reuqest header
            con.setRequestMethod("POST");
            con.setRequestProperty("User-Agent", "Mozilla/1.22 (compatible; MSIE 2.0; Windows 3.1)");
            con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

            String urlParameters = query;

            // Send post request
            con.setDoOutput(true);
            DataOutputStream wr = new DataOutputStream(con.getOutputStream());
            wr.writeBytes(urlParameters);
            wr.flush();
            wr.close();

            int responseCode = con.getResponseCode();

            BufferedReader in = new BufferedReader(
                    new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            //print result
            Bukkit.getLogger().info(response.toString());
            JSONParser parser = new JSONParser();
            final JSONObject jsonobj = (JSONObject) parser.parse(response.toString());
            Bukkit.getLogger().info("---------- XAPO TRANSACTION END ------------");
        return true;
    }
	//start of bitquest tx
    String sign_transaction(String tosign) throws InterruptedException, IOException {
        // Get runtime
        java.lang.Runtime rt = java.lang.Runtime.getRuntime();
        // Start a new process: UNIX command ls
        java.lang.Process p;
	p = rt.exec("go run /btcutils/signer/signer.go "+tosign+" "+this.privatekey);
        // You can or maybe should wait for the process to complete
        p.waitFor();
        // System.out.println("Process exited with code = " + rt.exitValue());
        // Get process' output: its InputStream
        java.io.InputStream is = p.getInputStream();
        java.io.BufferedReader reader = new java.io.BufferedReader(new InputStreamReader(is));
        // And print each line
        String s = null;
        StringBuffer signature = new StringBuffer();
        while ((s = reader.readLine()) != null) {
            System.out.println(s);
            signature.append(s);
        }
        is.close();
        System.out.println(signature.toString());
        return signature.toString();
    }
    boolean send_blockcypher_transaction(String json) throws IOException {
        JSONParser parser = new JSONParser();

        final JSONObject jsonObject;
        try {
            // String access_token=(String) jsonobj.get("access_token");
            jsonObject= (JSONObject) parser.parse(json);
        } catch (org.json.simple.parser.ParseException e) {
            e.printStackTrace();
            return false;
        }
        int fees=((Number)((JSONObject)jsonObject.get("tx")).get("fees")).intValue();
        System.out.println("fees: "+fees);
        System.out.println(jsonObject);
        JSONArray tosign=(JSONArray) jsonObject.get("tosign");
        System.out.println(tosign);
        JSONArray signatures=new JSONArray();
        JSONArray pubkeys=new JSONArray();

        try {
            for(int i=0;i<tosign.size();i++) {
                String signature=sign_transaction((String)tosign.get(i));
                signatures.add(signature);
                pubkeys.add(AltQuest.DOGE_PRIVATE_KEY);

            }
        } catch (InterruptedException e) {
            e.printStackTrace();

            return false;
        } catch (IOException e) {
            e.printStackTrace();

            return false;
        }
        jsonObject.put("signatures",signatures);
        jsonObject.put("pubkeys",pubkeys);
        System.out.println(jsonObject);


        URL url = new URL("https://api.blockcypher.com/v1/doge/main/txs/post?token=" + AltQuest.BLOCKCYPHER_API_KEY);

        HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
        String inputLine = "";

        try {
            System.out.println("\nSending 'POST' request to URL : " + url);
            System.out.println("Payload : " + jsonObject.toString());
            con.setRequestMethod("POST");
            con.setRequestProperty("User-Agent", "Mozilla/1.22 (compatible; MSIE 2.0; Windows 3.1)");
            con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");
            con.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
            con.setDoOutput(true);
            OutputStreamWriter out = new OutputStreamWriter(con.getOutputStream());
            out.write(jsonObject.toString());
            out.close();
            int responseCode = con.getResponseCode();

            System.out.println("Response Code : " + responseCode);

            BufferedReader in = new BufferedReader(
                    new InputStreamReader(con.getInputStream()));
            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            if (responseCode == 200||responseCode==201) {
             

                return true;
            } else {
                return false;
            }
        } catch(IOException ioe) {
            System.err.println("IOException: " + ioe);

            InputStream error = con.getErrorStream();

            int data = error.read();
            while (data != -1) {
                //do something with data...
                inputLine = inputLine + (char)data;
                data = error.read();
            }
            error.close();


            System.out.println(inputLine);


            return false;
        }
    }

    boolean create_blockcypher_transaction(int sat, String address) throws IOException, ParseException {
       if(this.final_balance()>=sat) {


            // inputs
            JSONArray input_addresses = new JSONArray();
            input_addresses.add(AltQuest.DOGE_ADDRESS);
            JSONObject input = new JSONObject();
            input.put("addresses", input_addresses);
            JSONArray inputs = new JSONArray();
            inputs.add(input);
            // outputs
            JSONArray output_addresses = new JSONArray();
            output_addresses.add(address);
            JSONObject output = new JSONObject();
            output.put("addresses", output_addresses);
            output.put("value", sat);
            JSONArray outputs = new JSONArray();
            outputs.add(output);


            JSONObject payload = new JSONObject();
            payload.put("inputs", inputs);
            payload.put("outputs", outputs);
            System.out.println("Payload : " + payload.toString());

            URL url = new URL("https://api.blockcypher.com/v1/doge/main/txs/new");
            String inputLine = "";
            HttpsURLConnection con = (HttpsURLConnection) url.openConnection();

            try {
                System.out.println("\nSending 'POST' request to URL : " + url);
                con.setRequestMethod("POST");
                con.setRequestProperty("User-Agent", "Mozilla/1.22 (compatible; MSIE 2.0; Windows 3.1)");
                con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");
                con.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
                con.setDoOutput(true);
                OutputStreamWriter out = new OutputStreamWriter(con.getOutputStream());
                out.write(payload.toString());
                out.close();
                int responseCode = con.getResponseCode();

                System.out.println("Response Code : " + responseCode);

                BufferedReader in = new BufferedReader(
                        new InputStreamReader(con.getInputStream()));
                StringBuffer response = new StringBuffer();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                if (responseCode == 200 || responseCode == 201) {
                    AltQuest.REDIS.set("transaction:" + this.address, response.toString());
                    System.out.println(AltQuest.REDIS.get("transaction:" + this.address));
                    if (this.send_blockcypher_transaction(AltQuest.REDIS.get("transaction:" + this.address)) == true) {
                        System.out.println(AltQuest.REDIS.decrBy("payment_balance:" + this.address, sat));
                        System.out.println(AltQuest.REDIS.decrBy("final_balance:" + this.address, sat));
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }
            } catch (IOException ioe) {
                System.err.println("IOException: " + ioe);

                InputStream error = con.getErrorStream();

                int data = error.read();
                while (data != -1) {
                    //do something with data...
                    inputLine = inputLine + (char) data;
                    data = error.read();
                }
                error.close();


                System.out.println(inputLine);


                return false;
            }
        } else {
            return false;
        }
    }/*
    boolean blockcypher_microtransaction(int sat, String address) throws IOException {
        JSONObject payload=new JSONObject();
        payload.addProperty("from_private",this.privatekey);
        payload.addProperty("to_address",address);
        payload.addProperty("value_satoshis",sat);
        URL url = new URL("https://api.blockcypher.com/v1/doge/main/txs/micro?token=" + AltQuest.BLOCKCYPHER_API_KEY);
        String inputLine = "";
        HttpsURLConnection con = (HttpsURLConnection) url.openConnection();

        try {
            System.out.println("\nSending 'POST' request to URL : " + url);
            System.out.println("Payload : " + payload.toString());
            con.setRequestMethod("POST");
            con.setRequestProperty("User-Agent", "Mozilla/1.22 (compatible; MSIE 2.0; Windows 3.1)");
            con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");
            con.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
            con.setDoOutput(true);
            OutputStreamWriter out = new OutputStreamWriter(con.getOutputStream());
            out.write(payload.toString());
            out.close();
            int responseCode = con.getResponseCode();

            System.out.println("Response Code : " + responseCode);

            BufferedReader in = new BufferedReader(
                    new InputStreamReader(con.getInputStream()));
            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            if (responseCode == 200||responseCode==201) {
                return true;
            } else {
                return false;
            }
        } catch(IOException ioe) {
            System.err.println("IOException: " + ioe);

            InputStream error = con.getErrorStream();

            int data = error.read();
            while (data != -1) {
                //do something with data...
                inputLine = inputLine + (char)data;
                data = error.read();
            }
            error.close();


            System.out.println(inputLine);


            return false;
        }
    }*/
//end of bitquest tx
/* test coins disabled by bitcoinjake09
    public boolean getTestnetCoins() {

//
//        # Fund prior address with faucet
//        curl -d '{"address": "CFqoZmZ3ePwK5wnkhxJjJAQKJ82C7RJdmd", "amount": 100000}' https://api.blockcypher.com/v1/bcy/test/faucet?token=$YOURTOKEN
//        {
//            "tx_ref": "02dbf5585d438a1cba82a9041dd815635a6b0df684225cb5271e11397a759479"
//        }

        System.out.println("Getting testnet coins from faucet...");
        JSONObject payload=new JSONObject();
        payload.addProperty("address",this.address);
        payload.addProperty("amount",100000);
        URL url = null;
        try {
            url = new URL("https://api.blockcypher.com/v1/bcy/test/faucet?token=" + AltQuest.BLOCKCYPHER_API_KEY);
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        String inputLine = "";
        HttpsURLConnection con = null;
        try {
            con = (HttpsURLConnection) url.openConnection();
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            System.out.println("\nSending 'POST' request to URL : " + url);
            System.out.println("Payload : " + payload.toString());
            con.setRequestMethod("POST");
            con.setRequestProperty("User-Agent", "Mozilla/1.22 (compatible; MSIE 2.0; Windows 3.1)");
            con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");
            con.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
            con.setDoOutput(true);
            OutputStreamWriter out = new OutputStreamWriter(con.getOutputStream());
            out.write(payload.toString());
            out.close();
            int responseCode = con.getResponseCode();

            System.out.println("Response Code : " + responseCode);

            BufferedReader in = new BufferedReader(
                    new InputStreamReader(con.getInputStream()));
            StringBuffer response = new StringBuffer();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();
            if(responseCode==200) {
                return true;
            } else {
                return false;
            }

        } catch(IOException ioe) {
            System.err.println("IOException: " + ioe);

            InputStream error = con.getErrorStream();

            int data = 0;
            try {
                data = error.read();
            } catch (IOException e) {
                e.printStackTrace();
            }
            while (data != -1) {
                //do something with data...
                inputLine = inputLine + (char)data;
                try {
                    data = error.read();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            try {
                error.close();
            } catch (IOException e) {
                e.printStackTrace();
            }


            System.out.println(inputLine);
            return false;

        }
    }*/
}
